// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name XsollaSDKLoginKitObjectiveC
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AuthenticationServices
import AuthenticationServices
import Foundation
import Swift
import UIKit
import WebKit
import XsollaSDKLoginKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class LoginKitObjectiveC : ObjectiveC.NSObject {
  @objc public static let shared: XsollaSDKLoginKitObjectiveC.LoginKitObjectiveC
  @objc final public func configureAnalytics(gameEngine: Foundation.NSString, gameEngineVersion: Foundation.NSString)
  @objc final public func authByUsernameAndPassword(username: Foundation.NSString, password: Foundation.NSString, oAuth2Params: XsollaSDKLoginKitObjectiveC.OAuth2Params, jwtParams: XsollaSDKLoginKitObjectiveC.JWTGenerationParams, completion: @escaping (XsollaSDKLoginKitObjectiveC.AccessTokenInfo?, Foundation.NSError?) -> Swift.Void)
  @objc final public func uploadUserPicture(accessToken: Foundation.NSString, imageURL: Foundation.NSURL, completion: @escaping (Foundation.NSString?, Foundation.NSError?) -> Swift.Void)
  @objc final public func linkSocialNetwork(_ providerName: Foundation.NSString, accessToken: Foundation.NSString, redirectUrl: Foundation.NSString, userAgent: Foundation.NSString?, presenter: XsollaSDKLoginKitObjectiveC.ViewControllerPresenting, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc final public func updateCurrentUserDetails(accessToken: Foundation.NSString, birthday: Foundation.NSDate? = nil, firstName: Foundation.NSString? = nil, lastName: Foundation.NSString? = nil, nickname: Foundation.NSString? = nil, gender: Foundation.NSString? = nil, completion: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@available(iOS 13.4, *)
extension XsollaSDKLoginKitObjectiveC.LoginKitObjectiveC {
  @objc final public func authBySocialNetwork(_ providerName: Foundation.NSString, oAuth2Params: XsollaSDKLoginKitObjectiveC.OAuth2Params, jwtParams: XsollaSDKLoginKitObjectiveC.JWTGenerationParams, presentationContextProvider: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, completion: @escaping (XsollaSDKLoginKitObjectiveC.AccessTokenInfo?, Foundation.NSError?) -> Swift.Void)
  @objc final public func authWithXsollaWidget(loginId: Foundation.NSString, oAuth2Params: XsollaSDKLoginKitObjectiveC.OAuth2Params, jwtParams: XsollaSDKLoginKitObjectiveC.JWTGenerationParams, locale: Foundation.NSString, presentationContextProvider: any AuthenticationServices.ASWebAuthenticationPresentationContextProviding, completion: @escaping (XsollaSDKLoginKitObjectiveC.AccessTokenInfo?, Foundation.NSError?) -> Swift.Void)
}
public typealias ViewControllerPresenting = UIKit.UIViewController
@objc public class OAuth2Params : ObjectiveC.NSObject {
  @objc final public let clientId: ObjectiveC.NSInteger
  @objc final public let state: Foundation.NSString
  @objc final public let responseType: Foundation.NSString
  @objc final public let scope: Foundation.NSString?
  @objc final public let redirectUri: Foundation.NSString?
  @objc public init(clientId: ObjectiveC.NSInteger, state: Foundation.NSString, scope: Foundation.NSString?, redirectUri: Foundation.NSString?)
  @objc deinit
}
@objc public class JWTGenerationParams : ObjectiveC.NSObject {
  @objc final public let grantType: XsollaSDKLoginKitObjectiveC.TokenGrantType
  @objc final public let clientId: ObjectiveC.NSInteger
  @objc final public let refreshToken: Foundation.NSString?
  @objc final public let clientSecret: Foundation.NSString?
  @objc final public let redirectUri: Foundation.NSString?
  @objc public init(grantType: XsollaSDKLoginKitObjectiveC.TokenGrantType, clientId: ObjectiveC.NSInteger, refreshToken: Foundation.NSString? = nil, clientSecret: Foundation.NSString? = nil, redirectUri: Foundation.NSString? = nil)
  @objc deinit
}
extension Foundation.NSError {
  @objc public static let loginKitErrorCodeUnknown: Swift.Int
  @objc public static let loginKitErrorCodeASCanceledLogin: Swift.Int
  @objc public static let loginKitErrorCodeASpresentationContextNotProvided: Swift.Int
  @objc public static let loginKitErrorCodeASpresentationContextInvalid: Swift.Int
  @objc public static let loginKitErrorCodeUnknownError: Swift.Int
  @objc public static let loginKitErrorCodeFailedURLExtraction: Swift.Int
  @objc public static let loginKitErrorCodeAuthCodeExtractionError: Swift.Int
  @objc public static let loginKitErrorCodeNetworkLinkingError: Swift.Int
  @objc public static let loginKitErrorCodeInvalidToken: Swift.Int
  @objc public static let loginKitErrorCodeInvalidRedirectUrl: Swift.Int
}
extension XsollaSDKLoginKit.LoginKitError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13.4, *)
public typealias PresentationContextProviding = AuthenticationServices.ASWebAuthenticationPresentationContextProviding
@available(iOS 13.4, *)
@objc @_Concurrency.MainActor @preconcurrency open class WebAuthenticationPresentationContextProvider : ObjectiveC.NSObject, XsollaSDKLoginKitObjectiveC.PresentationContextProviding {
  @_Concurrency.MainActor @preconcurrency @objc public func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
  @objc @_Concurrency.MainActor @preconcurrency public init(presentationAnchor: UIKit.UIWindow)
  @objc deinit
}
@available(iOS 13.4, *)
extension XsollaSDKLoginKit.WebAuthenticationSession.WebAuthenticationSessionError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum TokenGrantType : ObjectiveC.NSInteger {
  case authorizationCode
  case refreshToken
  case clientCredentials
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AccessTokenInfo : ObjectiveC.NSObject {
  @objc final public let accessToken: Foundation.NSString
  @objc final public let expiresIn: ObjectiveC.NSInteger
  @objc final public let refreshToken: Foundation.NSString?
  @objc final public let tokenType: Foundation.NSString
  @objc deinit
}
extension XsollaSDKLoginKitObjectiveC.LoginKitObjectiveC {
  public static let version: Swift.String
}
@available(iOS 13.4, *)
extension XsollaSDKLoginKitObjectiveC.WebAuthenticationPresentationContextProvider : Swift.Sendable {}
extension XsollaSDKLoginKitObjectiveC.TokenGrantType : Swift.Equatable {}
extension XsollaSDKLoginKitObjectiveC.TokenGrantType : Swift.Hashable {}
extension XsollaSDKLoginKitObjectiveC.TokenGrantType : Swift.RawRepresentable {}
